#!/bin/bash

# Defaults
OPEN=false
TARGET_PATH=$1

# OPTIONS
while [[ $# > 0 ]]
do
key="$1"
value="$2"
case $key in
	--open)
	OPEN=true
	shift
	;;
	--default)
	DEFAULT=YES
	;;
	*)
	;;
esac
shift
done

# Check if composer dependencies are installed
if [ ! -d bin ]
then
	# If not check if composer exists
	if [ ! $(which composer) ]
	then
		php -r "readfile('https://getcomposer.org/installer');" > composer-setup.php
		php -r "if (hash('SHA384', file_get_contents('composer-setup.php')) === '41e71d86b40f28e771d4bb662b997f79625196afcca95a5abf44391188c695c6c1456e16154c75a211d238cc3bc5cb47') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
		php composer-setup.php
		php -r "unlink('composer-setup.php');"
		sudo mv composer.phar /usr/local/bin/composer
	fi
	sudo composer install
	sudo chown -R $(whoami) vendor
fi

# Functions
pdepend()
{
	# Execute scan and output reports
	./bin/pdepend --summary-xml=$REPORTS_PATH/pdepend.xml $TARGET_PATH
}

phpmd()
{
	# Execute scan and output reports
	./bin/phpmd $TARGET_PATH xml cleancode,codesize,controversial,design,naming,unusedcode --reportfile $REPORTS_PATH/phpmd.xml --suffixes php,phtml
}

phpcs()
{
	# Execute scan and output reports
	./bin/phpcs $TARGET_PATH --report=xml --report-file=$REPORTS_PATH/phpcs.xml
}

phpcpd()
{
	# Execute scan and output reports
	./bin/phpcpd $TARGET_PATH  > $REPORTS_PATH/phpcpd.txt
}

phpdcd()
{
	# Execute scan and output reports
	./bin/phpdcd $TARGET_PATH > $REPORTS_PATH/phpdcd.txt
}

phploc()
{
	# Execute scan and output reports
	./bin/phploc --log-xml=$REPORTS_PATH/phploc.xml $TARGET_PATH > $REPORTS_PATH/phploc.txt
}

phpcbf()
{
	./bin/phpcbf $TARGET_PATH > $REPORTS_PATH/phpcbf.txt
}

open-reports()
{
	if [ $OPEN == true ]
	then
		# Check if node dependencies are installed
		if [ ! -d node_modules ]
		then
			if [ ! $(which npm) ]
			then
				echo "Please install npm application to view reports on your browser."
			else
				npm install
			fi
		fi
		node index.js
	fi
}

# If project directory exists run all analysers
if [ -d "$TARGET_PATH" ]
then
	# Report directory
	REPORTS_PATH=reports/$(date +%Y-%m-%d_%H%M%S)
	mkdir -p $REPORTS_PATH

	# Functions
	pdepend $TARGET_PATH $REPORTS_PATH
	phpmd $TARGET_PATH $REPORTS_PATH
	phpcs $TARGET_PATH $REPORTS_PATH
	phpcpd $TARGET_PATH $REPORTS_PATH
	phpdcd $TARGET_PATH $REPORTS_PATH
	phploc $TARGET_PATH $REPORTS_PATH

elif [ $OPEN == false ]
then
	if [ -z $TARGET_PATH ]
	then
		echo "The target path can't be null"
	else
		echo "The path "$TARGET_PATH" doesn't exist"
	fi
fi

# Open reports if flag is passed
open-reports $OPEN
